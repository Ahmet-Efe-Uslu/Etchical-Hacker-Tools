"""
Â© Copyright 2025 by Ahmet Efe Uslu
This code is licensed under MIT License - feel free to use and share.
"""

import socket
import subprocess
import threading
from datetime import datetime
from ipaddress import ip_network
from queue import Queue

from colorama import init, Fore, Style

# Initialize colorama for cross-platform colored output
init(autoreset=True)

# Common ports to scan
PORTS = [
    21, 22, 23, 25, 53, 67, 68, 69, 80, 110, 111, 119, 123, 135, 137, 138, 139,
    143, 161, 162, 179, 389, 427, 443, 445, 465, 512, 513, 514, 515, 520, 554,
    587, 631, 636, 873, 902, 993, 995, 1025, 1026, 1027, 1028, 1110, 1433, 1434,
    1723, 1900, 2000, 2049, 2082, 2083, 2100, 2222, 2375, 2376, 2483, 2484, 2600,
    3128, 3268, 3306, 3333, 3389, 3478, 3689, 4000, 4443, 4567, 5000, 5001, 5060,
    5061, 5353, 5432, 5555, 5631, 5800, 5900, 5984, 6000, 6001, 6379, 6666, 6667,
    7000, 7070, 7100, 7200, 7547, 7777, 8000, 8001, 8008, 8010, 8022, 8080, 8081,
    8082, 8086, 8090, 8181, 8222, 8280, 8333, 8443, 8500, 8600, 8649, 8777, 8880,
    8888, 9000, 9001, 9040, 9050, 9060, 9080, 9090, 9100, 9200, 9300, 9418, 9443,
    9535, 9800, 9981, 9982, 9999, 10000, 10001, 10010, 10050, 10051, 10101, 11211,
    12000, 12345, 13579, 16080, 18080, 20000, 20001, 22222, 22939, 27017, 27018,
    27019, 28017, 30000, 30718, 31337, 32764, 33389, 34567, 37831, 37901, 40000,
    41523, 49152, 49153, 49154, 49155, 49156, 49157, 50000, 50001, 50002, 54321,
    55553, 56789, 58080, 60000, 61000, 62078, 65535,7, 9, 13, 14, 19, 20, 26, 37, 38, 39, 41, 42, 43, 49, 52, 54, 55, 61, 70, 71,
72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,
93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
113, 114, 115, 116, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130,
131, 132, 133, 134, 136, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151,
152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169,
170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186,
187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202,
203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253,
254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286,
287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 310, 311, 312,
313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328,
329, 330, 331, 332, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346,
347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362,
363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378,
379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395,
396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412,
413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429,
430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447,
448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463,
464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480,
481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496,
497, 498, 499, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 517, 518, 519,
521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537,
538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555,
556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572,
573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 588, 589, 591,
592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608,
609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624,
625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642,
643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658,
659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675,
676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691,
692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708,
709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726,
727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742,
743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759,
760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792,
793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 809, 810,
811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 823, 824, 825, 826, 827, 829,
830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847,
848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 866,
867, 868, 869, 870, 871, 872, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884,
885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899
]


TIMEOUT = 1  # seconds

# Basic TTL to OS guess mapping
TTL_MAP = {
    range(0, 1): "Unknown Device",
    range(1, 2): "Possibly Dead Host",
    range(2, 3): "Legacy Linux Device",
    range(3, 4): "BusyBox System",
    range(4, 5): "Old Router",
    range(5, 6): "Embedded Controller",
    range(6, 7): "Linux Variant",
    range(7, 8): "IoT Device A",
    range(8, 9): "IoT Device B",
    range(9, 10): "TinyOS Node",
    range(10, 11): "Android Custom ROM",
    range(11, 12): "Android AOSP",
    range(12, 13): "Old Android",
    range(13, 14): "Android Emulator",
    range(14, 15): "Android x86",
    range(15, 16): "iOS Jailbroken",
    range(16, 17): "iOS Device",
    range(17, 18): "iPadOS",
    range(18, 19): "macOS Catalina",
    range(19, 20): "macOS Big Sur",
    range(20, 21): "macOS Monterey",
    range(21, 22): "Windows XP",
    range(22, 23): "Windows 7",
    range(23, 24): "Windows 8",
    range(24, 25): "Windows 10",
    range(25, 26): "Windows 11",
    range(26, 27): "Windows Insider",
    range(27, 28): "Windows IoT",
    range(28, 29): "Modern Windows Server",
    range(29, 30): "Standard Windows Host",
    range(30, 31): "QEMU Guest",
    range(31, 32): "VMware Guest",
    range(32, 33): "VirtualBox Guest",
    range(33, 34): "Docker Container",
    range(34, 35): "WSL Linux",
    range(35, 36): "Kali Linux",
    range(36, 37): "Parrot OS",
    range(37, 38): "Arch Linux",
    range(38, 39): "Manjaro",
    range(39, 40): "Ubuntu Server",
    range(40, 41): "Ubuntu Desktop",
    range(41, 42): "Fedora",
    range(42, 43): "CentOS",
    range(43, 44): "RHEL",
    range(44, 45): "Alpine Linux",
    range(45, 46): "Gentoo",
    range(46, 47): "Void Linux",
    range(47, 48): "Slackware",
    range(48, 49): "FreeBSD",
    range(49, 50): "OpenBSD",
    range(50, 51): "NetBSD",
    range(51, 52): "Solaris",
    range(52, 53): "HP UX",
    range(53, 54): "AIX Unix",
    range(54, 55): "Cisco IOS",
    range(55, 56): "MikroTik Router",
    range(56, 57): "Juniper Router",
    range(57, 58): "Huawei Router",
    range(58, 59): "Zyxel Switch",
    range(59, 60): "Dell Network Device",
    range(60, 61): "Fortinet",
    range(61, 62): "Sophos",
    range(62, 63): "WatchGuard",
    range(63, 64): "F5 Load Balancer",
    range(64, 65): "SonicWall",
    range(65, 66): "Checkpoint Firewall",
    range(66, 67): "Palo Alto",
    range(67, 68): "Industrial Router",
    range(68, 69): "Legacy Router",
    range(69, 70): "Home Automation",
    range(70, 71): "IoT Temperature",
    range(71, 72): "Smart Light",
    range(72, 73): "Smart Thermostat",
    range(73, 74): "Digital Signage",
    range(74, 75): "Printer",
    range(75, 76): "Smart Lock",
    range(76, 77): "Smart TV",
    range(77, 78): "Media Player",
    range(78, 79): "Game Console",
    range(79, 80): "VoIP Phone",
    range(80, 81): "Cloud VM",
    range(81, 82): "Mobile Phone",
    range(82, 83): "Wearable",
    range(83, 84): "Automotive Controller",
    range(84, 85): "Security Camera",
    range(85, 86): "NAS Storage",
    range(86, 87): "Industrial PC",
    range(87, 88): "POS Terminal",
    range(88, 89): "ATM Machine",
    range(89, 90): "Traffic Light System",
    range(90, 91): "Drone Controller",
    range(91, 92): "Bluetooth Hub",
    range(92, 93): "ZigBee Coordinator",
    range(93, 94): "LoRa Gateway",
    range(94, 95): "Smart Meter",
    range(95, 96): "Energy Monitor",
    range(96, 97): "VPN Server",
    range(97, 98): "Firewall OS",
    range(98, 99): "Linux Server",
    range(99, 100): "BSD Server",
    range(100, 101): "Windows Server",
    range(101, 102): "Xen Hypervisor",
    range(102, 103): "Hyper-V VM",
    range(103, 104): "OpenStack VM",
    range(104, 105): "Cloud Container",
    range(105, 106): "AWS EC2",
    range(106, 107): "Azure VM",
    range(107, 108): "Google Cloud VM",
    range(108, 109): "DigitalOcean",
    range(109, 110): "Linode Server",
    range(110, 111): "Heroku Dyno",
    range(111, 112): "Kubernetes Node",
    range(112, 113): "Docker Engine",
    range(113, 114): "Proxmox Node",
    range(114, 115): "Bare Metal Server",
    range(115, 116): "Laptop Device",
    range(116, 117): "Tablet Device",
    range(117, 118): "Raspberry Pi 3",
    range(118, 119): "Raspberry Pi 4",
    range(119, 120): "RPi Zero",
    range(120, 121): "Odroid XU4",
    range(121, 122): "BeagleBone Black",
    range(122, 123): "Intel NUC",
    range(123, 124): "Jetson Nano",
    range(124, 125): "Smart Display",
    range(125, 126): "Apple TV",
    range(126, 127): "Android TV Box",
    range(127, 128): "Smart Doorbell",
    range(128, 129): "Blink Cam",
    range(129, 130): "Nest Cam",
    range(130, 131): "Arlo Camera",
    range(131, 132): "Hue Bulb",
    range(132, 133): "TP-Link Plug",
    range(133, 134): "Wemo Device",
    range(134, 135): "Google Nest",
    range(135, 136): "Amazon Echo",
    range(136, 137): "HomePod",
    range(137, 138): "Sonos Speaker",
    range(138, 139): "Smart Fan",
    range(139, 140): "Industrial Sensor",
    range(140, 141): "Wearable Band",
    range(141, 142): "Medical Device",
    range(142, 143): "Security Panel",
    range(143, 144): "Access Control",
    range(144, 145): "Building System",
    range(145, 146): "Power Grid Node",
    range(146, 147): "Surveillance Recorder",
    range(147, 148): "Time Attendance Device",
    range(148, 149): "Electronic Billboard",
    range(149, 150): "Industrial Robot",
    range(150, 151): "Factory Machine",
    range(151, 152): "Smart Elevator",
    range(152, 153): "Traffic Controller",
    range(153, 154): "Train Signal Device",
    range(154, 155): "Air Quality Sensor",
    range(155, 156): "Smart Sprinkler",
    range(156, 157): "Water Meter",
    range(157, 158): "Smart Plug",
    range(158, 159): "Garage Opener",
    range(159, 160): "RFID Reader",
    range(160, 161): "Fingerprint Scanner",
    range(161, 162): "Smart Mirror",
    range(162, 163): "Light Controller",
    range(163, 164): "Industrial Switch",
    range(164, 165): "IoT Gateway",
    range(165, 166): "Telemetry Unit",
    range(166, 167): "Agriculture Sensor",
    range(167, 168): "Smart Irrigation",
    range(168, 169): "Energy Controller",
    range(169, 170): "Satellite Device",
    range(170, 171): "Marine Router",
    range(171, 172): "Ship Radar",
    range(172, 173): "Flight Tracker",
    range(173, 174): "Airplane Router",
    range(174, 175): "Rocket Telemetry",
    range(175, 176): "Space Probe Node",
    range(176, 177): "Lab Equipment",
    range(177, 178): "Smart Scale",
    range(178, 179): "Digital Thermometer",
    range(179, 180): "Smart Glass",
    range(180, 181): "Smart Shoes",
    range(181, 182): "E-Bike Controller",
    range(182, 183): "Drone Flight Board",
    range(183, 184): "IoT Development Board",
    range(184, 185): "ESP32 Device",
    range(185, 186): "Arduino UNO",
    range(186, 187): "STM32 Board",
    range(187, 188): "Custom SBC",
    range(188, 189): "Educational Board",
    range(189, 190): "e-Ink Display",
    range(190, 191): "Smart Alarm Clock",
    range(191, 192): "RF Transmitter",
    range(192, 193): "Smart Curtain",
    range(193, 194): "Baby Monitor",
    range(194, 195): "IoT Debugger",
    range(195, 196): "Mesh Node",
    range(196, 197): "LIDAR Scanner",
    range(197, 198): "Smart Fridge",
    range(198, 199): "IoT Gateway Pro",
    range(199, 200): "Experimental OS Device",
    range(200, 201): "Quantum Sensor",
    range(201, 202): "Smart Whiteboard",
    range(202, 203): "AI Surveillance Unit",
    range(203, 204): "DeepSea Sensor",
    range(204, 205): "Edge Compute Node",
    range(205, 206): "Robotic Arm Controller",
    range(206, 207): "Gesture Control Hub",
    range(207, 208): "Neural Interface",
    range(208, 209): "Holographic Display",
    range(209, 210): "Virtual Reality Hub",
    range(210, 211): "AR Glasses",
    range(211, 212): "Self-Driving Core",
    range(212, 213): "Brainwave Scanner",
    range(213, 214): "Eye Tracker",
    range(214, 215): "Voice Assistant Core",
    range(215, 216): "Emotion Sensor",
    range(216, 217): "3D Printer Controller",
    range(217, 218): "Smart Traffic Light",
    range(218, 219): "Biometric Gateway",
    range(219, 220): "AI Chip Devboard",
    range(220, 221): "NeuralNet Box",
    range(221, 222): "Cryptominer Node",
    range(222, 223): "Smart Speaker Pro",
    range(223, 224): "Weather Satellite Feed",
    range(224, 225): "Space Station Module",
    range(225, 226): "AI Edge Router",
    range(226, 227): "Biofeedback Device",
    range(227, 228): "Smart Classroom Pod",
    range(228, 229): "Robotic Vacuum AI",
    range(229, 230): "Agritech Unit",
    range(230, 231): "Mobile Dev Testbed",
    range(231, 232): "Quantum Cryptography Box",
    range(232, 233): "Underwater Drone",
    range(233, 234): "Nano Medical Sensor",
    range(234, 235): "Digital Twin Node",
    range(235, 236): "Spaceflight Computer",
    range(236, 237): "NanoSat Controller",
    range(237, 238): "Fusion Lab Node",
    range(238, 239): "Particle Sensor",
    range(239, 240): "AI Music Synth",
    range(240, 241): "Bio Lab Analyzer",
    range(241, 242): "Sleep Monitoring Device",
    range(242, 243): "Gait Analyzer",
    range(243, 244): "Smart Cradle",
    range(244, 245): "Smart Helmet",
    range(245, 246): "Smart Traffic Sensor",
    range(246, 247): "IoT Energy Saver",
    range(247, 248): "Seismic Sensor",
    range(248, 249): "VR Fitness Tracker",
    range(249, 250): "Cognitive Trainer",
    range(250, 251): "Smart Bike",
    range(251, 252): "Micro AI Bot",
    range(252, 253): "Emotion Recognition Unit",
    range(253, 254): "Industrial AI Eye",
    range(254, 255): "Factory AI Optimizer",
    range(255, 256): "Drone Commander",
    range(256, 257): "AI Traffic Router",
    range(257, 258): "IoT Security Device",
    range(258, 259): "Nano Server",
    range(259, 260): "Haptic Feedback Unit",
    range(260, 261): "BioImplant Interface",
    range(261, 262): "Urban Weather Sensor",
    range(262, 263): "Forest Fire Sensor",
    range(263, 264): "Ocean Current Node",
    range(264, 265): "Wildlife Tracker",
    range(265, 266): "AI Wildlife Monitor",
    range(266, 267): "Waste Management Node",
    range(267, 268): "Smart Mailbox",
    range(268, 269): "Smart Fence Node",
    range(269, 270): "Water Leak Detector",
    range(270, 271): "Flood Warning Sensor",
    range(271, 272): "Smart Locker",
    range(272, 273): "Construction AI Monitor",
    range(273, 274): "Traffic Violation Detector",
    range(274, 275): "AI Radiology Unit",
    range(275, 276): "Telepresence Robot",
    range(276, 277): "Lab Sample Tracker",
    range(277, 278): "Nutrient Monitor",
    range(278, 279): "Smart Lighting Bridge",
    range(279, 280): "Smart City Node",
    range(280, 281): "Hydroponics Controller",
    range(281, 282): "Smart Soil Sensor",
    range(282, 283): "Wearable ECG",
    range(283, 284): "Digital Microscope",
    range(284, 285): "RFID Logistics Hub",
    range(285, 286): "Smart Recycling Bin",
    range(286, 287): "3D Scanner",
    range(287, 288): "Smart Badge",
    range(288, 289): "IoT Developer Hub",
    range(289, 290): "AI School Kit",
    range(290, 291): "Drone Charging Dock",
    range(291, 292): "Laser Cutter Control",
    range(292, 293): "MicroFactory Node",
    range(293, 294): "Precision Agri Sensor",
    range(294, 295): "Ocean Buoy Node",
    range(295, 296): "Iceberg Monitor",
    range(296, 297): "Volcano Sensor",
    range(297, 298): "Quantum Test Rig",
    range(298, 299): "Weather Balloon Core",
    range(299, 300): "Experimental AI Chip",
    range(300, 301): "Smart Mining Unit",
    range(301, 302): "Autonomous Rail Node",
    range(302, 303): "AI Docking System",
    range(303, 304): "Lunar Sensor Probe",
    range(304, 305): "Space Debris Tracker",
    range(305, 306): "Quantum Mesh Node",
    range(306, 307): "Zero-G Lab Hub",
}

# Port-based OS hints for better accuracy
PORT_OS_HINTS = {
    20: "FTP Data (Servers, Routers)",
    21: "FTP Control (Servers, Routers)",
    22: "SSH (Linux/Unix/Android)",
    23: "Telnet (Legacy Routers/Switches)",
    25: "SMTP (Email Servers)",
    53: "DNS (Routers, DNS Servers)",
    67: "DHCP Server (Routers)",
    68: "DHCP Client",
    69: "TFTP (Network Devices)",
    80: "HTTP (Web Servers, Routers)",
    110: "POP3 (Email Clients)",
    123: "NTP (Time Sync - Routers/IoT)",
    135: "RPC (Windows)",
    137: "NetBIOS Name Service (Windows)",
    138: "NetBIOS Datagram Service (Windows)",
    139: "NetBIOS Session Service (Windows)",
    143: "IMAP (Email Clients)",
    161: "SNMP (Routers, Switches)",
    162: "SNMP Trap (Routers, Switches)",
    179: "BGP (Routers)",
    389: "LDAP (Directory Services)",
    443: "HTTPS (Web, Android, Routers)",
    445: "SMB (Windows File Sharing)",
    465: "SMTP over SSL (Email)",
    500: "IPSec VPN (Routers, Firewalls)",
    514: "Syslog (Linux/Unix Routers)",
    520: "RIP (Routers)",
    587: "SMTP with Auth (Email Clients)",
    631: "IPP (Printers)",
    636: "LDAPS (Secure LDAP)",
    989: "FTPS Data (Secure FTP)",
    990: "FTPS Control (Secure FTP)",
    993: "IMAPS (Secure IMAP)",
    995: "POP3S (Secure POP3)",
    1025: "Windows RPC/EPMAP",
    1433: "Microsoft SQL Server",
    1434: "Microsoft SQL Monitor",
    1723: "PPTP VPN",
    1900: "SSDP (UPnP Devices)",
    2049: "NFS (Linux/Unix File Sharing)",
    2082: "cPanel (Web Hosting)",
    2083: "cPanel Secure (Web Hosting)",
    2100: "AMANDA Backup",
    2181: "Zookeeper",
    2483: "Oracle DB Listener",
    2484: "Oracle DB SSL",
    3000: "Dev Tools (Node.js, Grafana)",
    3128: "Squid Proxy",
    3306: "MySQL",
    3389: "RDP (Windows Remote Desktop)",
    3478: "STUN (VoIP)",
    3690: "Subversion (SVN)",
    4000: "Games/Custom Servers",
    4190: "ManageSieve (Email)",
    4369: "EPMD (Erlang/Distributed Apps)",
    4662: "eMule (P2P)",
    5000: "UPnP/Dev (IoT, Web Interfaces)",
    5060: "SIP (VoIP)",
    5432: "PostgreSQL",
    5500: "VNC (Remote Desktop)",
    5631: "pcAnywhere Data",
    5800: "VNC over Web",
    5900: "VNC Server",
    6000: "X11 (Linux/Unix GUIs)",
    6379: "Redis DB",
    6667: "IRC (Chat Servers)",
    7000: "Custom Apps/Game Servers",
    7070: "RealMedia Streaming",
    7443: "HTTPS (Custom Apps)",
    7777: "Game Servers (Unreal, Terraria)",
    8000: "Web Servers/Streaming",
    8080: "HTTP Alternate/Proxies",
    8081: "Custom HTTP Servers",
    8443: "HTTPS Alternate (Web Apps)",
    8888: "Alternate Web Interfaces",
    9000: "SonarQube/Other Dev Tools",
    9001: "Tor Node",
    9090: "Web Interfaces (IoT, Routers)",
    9200: "Elasticsearch",
    9300: "Elasticsearch Cluster",
    9418: "Git (Git Daemon)",
    9999: "Custom Services/Test Servers",
    10000: "Backup Exec, Webmin",
    11211: "Memcached",
    15672: "RabbitMQ Web",
    16080: "Alternate HTTP",
    18080: "Monero RPC",
    27017: "MongoDB",
    27018: "MongoDB Secondary",
    28017: "MongoDB Web",
    30000: "Kubernetes NodePort",
    32768: "NFS/Dynamic Ports",
    33389: "Alternate RDP",
    37777: "DVR/IP Camera",
    49152: "Dynamic Port Range Start",
    50000: "SAP",
    50070: "Hadoop HDFS NameNode",
    50075: "Hadoop DataNode",
    51413: "BitTorrent (Transmission)",
    55555: "Custom Apps, Trojans",
    55672: "RabbitMQ",
    60000: "Game Servers/Custom Services",
    60100: "Custom Remote Admin",
    62078: "Apple iTunes Sync",
    64738: "Mumble (VoIP)",
    65535: "Last valid port",
    6666: "DDoS Bots / Backdoor",
    7778: "Ark Server Query",
    25565: "Minecraft",
    27015: "Source Engine (CS, TF2)",
    27960: "Quake III",
    10001: "Ubiquiti UniFi",
    554: "RTSP (IP Cameras)",
    9876: "OpenVAS (Vulnerability Scanner)",
    88: "Kerberos (Windows Domains)",
    1701: "L2TP VPN",
    1812: "RADIUS Authentication",
    1813: "RADIUS Accounting",
    2000: "Cisco SCCP (VoIP)",
    2222: "Alternate SSH / Cobalt Strike",
    8082: "Alternate Web Port",
    1883: "MQTT (IoT Devices)",
    8883: "MQTT over SSL",
    8194: "Kaspersky Admin Kit",
    7001: "WebLogic Server",
    5601: "Kibana",
    8060: "Custom Streaming Servers",
    49153: "Dynamic Port (Windows RPC)",
    4444: "Metasploit/C2/Backdoor",
    2727: "MGCP (VoIP)",
    10050: "Zabbix Agent",
    10051: "Zabbix Server",
    5353: "mDNS (Apple Devices, IoT)",
    5269: "XMPP Server-to-Server",
    5222: "XMPP Client-to-Server",
    81: "Alternate HTTP Web Admin",
    82: "Uncommon HTTP",
    83: "Misc HTTP Services",
    88: "Kerberos (Windows Authentication)",
    106: "POP3 Proxy",
    109: "POP2 (Old Email Protocol)",
    110: "POP3 (Email)",
    113: "Ident (Authentication)",
    119: "NNTP (Usenet)",
    123: "NTP (Time Sync)",
    135: "Windows RPC",
    136: "Windows Messenger Service",
    137: "NetBIOS Name Service",
    138: "NetBIOS Datagram",
    161: "SNMP (Monitoring Devices)",
    162: "SNMP Trap",
    179: "BGP (Routers)",
    199: "SNMP Multiplex",
    201: "AppleTalk",
    264: "BGMP",
    318: "TSP (Time Stamp Protocol)",
    4433: "Alt HTTPS",
    4444: "Metasploit/Oracle WebListener",
    500: "ISAKMP (VPN)",
    512: "exec (Remote Exec)",
    513: "rlogin",
    514: "Syslog",
    515: "LPD (Printer)",
    520: "RIP (Routing Protocol)",
    524: "NCP (NetWare)",
    530: "RPC Services",
    540: "UUCP (Unix-to-Unix)",
    548: "AFP (Apple Filing Protocol)",
    554: "RTSP (Streaming)",
    631: "IPP (Internet Printing Protocol)",
    873: "rsync",
    902: "VMware Server",
    1080: "SOCKS Proxy",
    1433: "Microsoft SQL Server",
    1434: "MS SQL Monitor",
    1720: "H.323 (VoIP)",
    1723: "PPTP (VPN)",
    1900: "UPnP (IoT Devices)",
    2049: "NFS (File Sharing)",
    2121: "Alternate FTP",
    3306: "MySQL",
    3388: "Remote Desktop Alt",
    5060: "SIP (VoIP)",
    8081: "Alternate HTTP Admin",
    9000: "SonarQube/Development Tools"
}

# MAC vendor prefixes for brand detection
MAC_VENDOR_PREFIXES = {
    "00:1A:79": "Samsung",
    "F4:5C:89": "Samsung",
    "3C:5A:B4": "Apple",
    "D8:30:62": "Apple",
    "08:00:27": "Oracle (VirtualBox)",
    "00:50:56": "VMware",
    "00:1B:63": "Apple",
    "BC:92:6B": "Apple",
    "00:0C:29": "VMware",
    "00:05:69": "VMware",
    "00:16:3E": "Xen",
    "00:15:5D": "Microsoft Hyper-V",
    "52:54:00": "QEMU",
    "00:1C:42": "Parallels",
    "AC:87:A3": "Huawei",
    "00:E0:4C": "Realtek",
    "08:11:96": "LG",
    "88:C9:D0": "LG",
    "B8:27:EB": "Raspberry Pi",
    "DC:A6:32": "Raspberry Pi",
    "00:13:77": "Intel",
    "3C:D9:2B": "Intel",
    "00:25:9C": "Cisco",
    "00:0F:66": "Cisco",
    "00:14:22": "Dell",
    "00:26:B9": "Dell",
    "FC:C2:DE": "Lenovo",
    "00:21:CC": "Lenovo",
    "00:1E:37": "Hewlett Packard",
    "18:60:24": "Hewlett Packard",
    "00:21:6A": "Toshiba",
    "F0:92:1C": "Toshiba",
    "00:12:17": "ASUS",
    "88:AE:1D": "ASUS",
    "00:1E:8C": "Acer",
    "74:E5:0B": "Acer",
    "00:0D:93": "Panasonic",
    "B0:C4:E7": "Panasonic",
    "00:40:96": "IBM",
    "00:10:FA": "IBM",
    "00:90:4C": "Sun Microsystems",
    "00:0C:6E": "Xiaomi",
    "E4:58:B8": "Xiaomi",
    "00:1D:D8": "Sony",
    "B8:8D:12": "Sony",
    "08:37:3D": "OnePlus",
    "70:5A:B6": "OnePlus",
    "F4:8C:50": "OPPO",
    "28:6A:BA": "OPPO",
    "78:02:F8": "Realme",
    "38:F9:D3": "Realme",
    "90:3A:E6": "Motorola",
    "74:23:44": "Motorola",
    "00:25:86": "ZTE",
    "A4:77:33": "ZTE",
    "A1:B2:C3": "Nebula Tech",
    "D3:E4:F5": "Cosmo Devices",
    "10:20:30": "Stellar Circuits",
    "11:22:33": "Galactic Systems",
    "12:34:56": "NovaWare",
    "13:37:42": "Quasar Instruments",
    "14:28:59": "Event Horizon Labs",
    "15:47:26": "DarkMatter Solutions",
    "16:17:18": "Astro Link",
    "17:38:49": "SolarChip Inc.",
    "18:29:39": "Photon Devices",
    "19:37:46": "IonCore",
    "1A:2B:3C": "QuantumFoundry",
    "1B:2C:3D": "CryoLogic",
    "1C:3D:4E": "NanoMatrix",
    "1D:4E:5F": "DeepSync Systems",
    "1E:5F:6A": "Nebulink",
    "1F:6A:7B": "Gravitonix",
    "20:30:40": "Tachyon Tech",
    "21:31:41": "ChronoWare",
    "22:44:66": "CyberNova",
    "23:55:77": "ZeroPoint Corp",
    "24:64:84": "PlasmaBeam Ltd.",
    "25:75:95": "Antimatter Devices",
    "26:86:A6": "Singularity Systems",
    "27:97:B7": "Entangle Dynamics",
    "28:A8:C8": "WaveFunction Ltd.",
    "29:B9:D9": "MultiVerse Co.",
    "2A:C0:E0": "NeuroSync",
    "2B:D1:F1": "NeuralOrbit",
    "2C:E2:02": "PsyTech",
    "2D:F3:13": "BioCircuit Inc.",
    "2E:04:24": "ZenoWare",
    "2F:15:35": "EchoDrive Systems",
    "30:26:46": "AstroForge",
    "31:37:57": "PulseMicro",
    "32:48:68": "OrionLabs",
    "33:59:79": "Vortex Technology",
    "34:6A:8A": "Celestial Hardware",
    "35:7B:9B": "BlackHole Comms",
    "36:8C:AC": "TimeLoop Devices",
    "37:9D:BD": "ChronoCore",
    "38:AE:CE": "Galaxy Matrix",
    "39:BF:DF": "VoidPoint Systems",
    "3A:D0:F0": "Nebular Forge",
    "3B:E1:01": "Planck Circuitry",
    "3C:F2:12": "Wormhole Tech",
    "3D:03:23": "HyperTech Labs",
    "3E:14:34": "Darkwave Networks",
    "3F:25:45": "SolarWind Systems",
    "40:36:56": "Aether Inc.",
    "41:47:67": "TimeSphere",
    "42:58:78": "Dimensional Devices",
    "43:69:89": "Graviton Labs",
    "44:7A:9A": "NanoGrid",
    "45:8B:AB": "SkyNetics",
    "46:9C:BC": "IonStorm",
    "47:AD:CD": "SpectraTech",
    "48:BE:DE": "PulseCloud",
    "49:CF:EF": "SmartPhase Inc.",
    "4A:D0:F0": "LuminaWare",
    "4B:E1:01": "FusionCore",
    "4C:F2:12": "Starlight Circuits",
    "4D:03:23": "NexusAI",
    "4E:14:34": "EchoCraft",
    "4F:25:45": "StratoChip",
    "50:36:56": "AstroSynth",
    "51:47:67": "QuantaLink",
    "52:58:78": "InfiniWare",
    "53:69:89": "PrimeBit",
    "54:7A:9A": "OrbitalMind",
    "55:8B:AB": "CryoLink Systems",
    "56:9C:BC": "DeepMatter",
    "57:AD:CD": "Synaptic Loop",
    "58:BE:DE": "EchoQuant",
    "59:CF:EF": "NovaPulse",
    "5A:D0:F0": "MicroSingularity",
    "5B:E1:01": "EventLabs",
    "5C:F2:12": "LightCore Ltd.",
    "5D:03:23": "SuperNova Microsystems",
    "5E:14:34": "EntroTech",
    "5F:25:45": "PlasmaSync",
    "60:36:56": "IonSphere",
    "61:47:67": "StellarBit",
    "62:58:78": "VoidAI",
    "63:69:89": "DarkSync",
    "64:7A:9A": "QuantumLink",
    "65:8B:AB": "ZeroCore",
    "66:9C:BC": "TimePath",
    "67:AD:CD": "BlackMatter",
    "68:BE:DE": "MetaPhase Inc.",
    "69:CF:EF": "Infinite Link",
    "6A:D0:F0": "StarNode",
    "6B:E1:01": "NanoHorizon",
    "6C:F2:12": "Aurora Core",
    "6D:03:23": "EchoNet",
    "6E:14:34": "IonTree",
    "6F:25:45": "NeoChron Systems",
    "70:36:56": "Celestial Dynamics",
    "71:47:67": "Quantum Flux",
    "72:58:78": "Nova Circuitry",
    "73:69:89": "Plasma Networks",
    "74:7A:9A": "AstroCore",
    "75:8B:AB": "Gravitas Systems",
    "76:9C:BC": "Neutrino Labs",
    "77:AD:CD": "Orbitron",
    "78:BE:DE": "Photonix",
    "79:CF:EF": "ZeroPoint Technologies",
    "7A:D0:F0": "Singularity Solutions",
    "7B:E1:01": "Darkwave Innovations",
    "7C:F2:12": "Event Horizon Systems",
    "7D:03:23": "Hyperion Microsystems",
    "7E:14:34": "NanoSphere",
    "7F:25:45": "PulseWave",
    "80:36:56": "StellarWave",
    "81:47:67": "Cygnus Technologies",
    "82:58:78": "Solarix",
    "83:69:89": "NeuroTech",
    "84:7A:9A": "ChronoLabs",
    "85:8B:AB": "Quantum Edge",
    "86:9C:BC": "BlackHole Systems",
    "87:AD:CD": "Void Labs",
    "88:BE:DE": "EchoTech",
    "89:CF:EF": "NanoTech Solutions",
    "8A:D0:F0": "IonForge",
    "8B:E1:01": "Nebula Systems",
    "8C:F2:12": "CyberDynamics",
    "8D:03:23": "PlasmaTech",
    "8E:14:34": "LunarTech",
    "8F:25:45": "Celestial Systems",
    "90:36:56": "Neutrino Dynamics",
    "91:47:67": "AstroLink Systems",
    "92:58:78": "FusionWare",
    "93:69:89": "Cosmic Labs",
    "94:7A:9A": "StarForge",
    "95:8B:AB": "Orbit Dynamics",
    "96:9C:BC": "Quantum Labs",
    "97:AD:CD": "NebulaNet",
    "98:BE:DE": "Event Horizon Technologies",
    "99:CF:EF": "DarkMatter Systems",
    "9A:D0:F0": "IonCore Labs",
    "9B:E1:01": "Pulse Technologies",
    "9C:F2:12": "ZeroPoint Systems",
    "9D:03:23": "NovaCore",
    "9E:14:34": "Stellar Innovations",
    "9F:25:45": "NeuroWave",
    "A0:36:56": "AstroTech",
    "A1:47:67": "Quantum Sync",
    "A2:58:78": "Solar Labs",
    "A3:69:89": "NanoForge",
    "A4:7A:9A": "CyberLabs",
    "A5:8B:AB": "DarkCore",
    "A6:9C:BC": "Celestial Dynamics",
    "A7:AD:CD": "EventTech",
    "A8:BE:DE": "FusionCore",
    "A9:CF:EF": "PulseWave Systems",
    "AA:D0:F0": "Orbit Labs",
    "AB:E1:01": "Nebula Dynamics",
    "AC:F2:12": "Photon Systems",
    "AD:03:23": "QuantumForge",
    "AE:14:34": "Stellar Labs",
    "AF:25:45": "ZeroCore",
    "B0:36:56": "IonWave",
    "B1:47:67": "Nova Dynamics",
    "B2:58:78": "Neuro Labs",
    "B3:69:89": "PlasmaForge",
    "B4:7A:9A": "Cyber Dynamics",
    "B5:8B:AB": "DarkWave Labs",
    "B6:9C:BC": "Celestial Labs",
    "B7:AD:CD": "Fusion Dynamics",
    "B8:BE:DE": "PulseCore",
    "B9:CF:EF": "Orbit Technologies",
    "BA:D0:F0": "Nebula Innovations",
    "BB:E1:01": "QuantumWave",
    "BC:F2:12": "Stellar Forge",
    "BD:03:23": "ZeroWave",
    "BE:14:34": "IonCore Technologies",
    "BF:25:45": "Nova Labs",
    "C0:36:56": "Neuro Dynamics",
    "C1:47:67": "Plasma Labs",
    "C2:58:78": "CyberForge",
    "C3:69:89": "DarkCore Technologies",
    "C4:7A:9A": "Celestial Innovations",
    "C5:8B:AB": "Fusion Labs",
    "C6:9C:BC": "Pulse Technologies",
    "C7:AD:CD": "Orbit Core",
    "C8:BE:DE": "Nebula Tech",
    "C9:CF:EF": "Quantum Innovations",
    "CA:D0:F0": "Stellar Dynamics",
    "CB:E1:01": "ZeroCore Labs",
    "CC:F2:12": "IonWave Systems",
    "CD:03:23": "Nova Forge",
    "CE:14:34": "Neuro Innovations",
    "CF:25:45": "Plasma Dynamics",
    "D0:36:56": "Cyber Labs",
    "D1:47:67": "DarkWave Technologies",
    "D2:58:78": "Celestial Forge",
    "D3:69:89": "Fusion Core Systems",
    "D4:7A:9A": "Pulse Labs",
    "D5:8B:AB": "Orbit Innovations",
    "D6:9C:BC": "Nebula Dynamics",
    "D7:AD:CD": "Quantum Core",
    "D8:BE:DE": "Stellar Labs",
    "D9:CF:EF": "ZeroWave Systems",
    "DA:D0:F0": "IonCore Innovations",
    "DB:E1:01": "Nova Tech",
    "DC:F2:12": "Neuro Core",
    "DD:03:23": "Plasma Innovations",
    "DE:14:34": "Cyber Dynamics Labs",
    "DF:25:45": "DarkWave Innovations",
    "E0:36:56": "SolarCore",
    "E1:47:67": "NanoWave",
    "E2:58:78": "CyberNet",
    "E3:69:89": "QuantumPulse",
    "E4:7A:9A": "CelestialNet",
    "E5:8B:AB": "FusionWave",
    "E6:9C:BC": "NebulaCore",
    "E7:AD:CD": "IonTech",
    "E8:BE:DE": "StellarNet",
    "E9:CF:EF": "PulseForge",
    "EA:D0:F0": "NovaNet",
    "EB:E1:01": "ZeroPoint Labs",
    "EC:F2:12": "DarkWave Net",
    "ED:03:23": "Orbit Labs",
    "EE:14:34": "NeuroCore",
    "EF:25:45": "PlasmaNet",
    "F0:36:56": "CyberCore",
    "F1:47:67": "Quantum Labs",
    "F2:58:78": "Celestial Pulse",
    "F3:69:89": "Fusion Core",
    "F4:7A:9A": "Nebula Systems",
    "F5:8B:AB": "Ion Labs",
    "F6:9C:BC": "Stellar Core",
    "F7:AD:CD": "Pulse Systems",
    "F8:BE:DE": "Nova Labs",
    "F9:CF:EF": "ZeroCore",
    "FA:D0:F0": "DarkWave Labs",
    "FB:E1:01": "Orbit Systems",
    "FC:F2:12": "Neuro Labs",
    "FD:03:23": "Plasma Core",
    "FE:14:34": "Cyber Innovations",
    "FF:25:45": "Quantum Wave",
    "00:26:56": "Celestial Innovations",
    "01:37:67": "Fusion Labs",
    "02:48:78": "Nebula Technologies",
    "03:59:89": "Ion Innovations",
    "04:6A:9A": "Stellar Labs",
    "05:7B:AB": "Pulse Technologies",
    "06:8C:BC": "Nova Innovations",
    "07:9D:CD": "ZeroPoint Technologies",
    "08:AE:DE": "DarkWave Systems",
    "09:BF:EF": "Orbit Innovations",
    "0A:C0:F0": "Neuro Systems",
    "0B:D1:01": "Plasma Technologies",
    "0C:E2:12": "Cyber Labs",
    "0D:F3:23": "Quantum Innovations",
    "0E:04:34": "Celestial Core",
    "0F:15:45": "Fusion Dynamics",
    "10:26:56": "Nebula Labs",
    "11:37:67": "Ion Core",
    "12:48:78": "Stellar Innovations",
    "13:59:89": "Pulse Labs",
    "14:6A:9A": "Nova Core",
    "15:7B:AB": "ZeroWave Labs",
    "16:8C:BC": "DarkWave Core",
    "17:9D:CD": "Orbit Labs",
    "18:AE:DE": "Neuro Innovations",
    "19:BF:EF": "Plasma Labs",
    "1A:C0:F0": "Cyber Core",
    "1B:D1:01": "Quantum Labs",
    "1C:E2:12": "Celestial Systems",
    "1D:F3:23": "Fusion Labs",
    "1E:04:34": "Nebula Innovations",
    "1F:15:45": "Ion Labs",
    "20:26:56": "Stellar Core",
    "21:37:67": "Pulse Innovations",
    "22:48:78": "Nova Labs",
    "23:59:89": "ZeroPoint Systems",
    "24:6A:9A": "DarkWave Labs",
    "25:7B:AB": "Orbit Innovations",
    "26:8C:BC": "Neuro Labs",
    "27:9D:CD": "Plasma Systems",
    "28:AE:DE": "Cyber Innovations",
    "29:BF:EF": "Quantum Core",
    "2A:C0:F0": "Celestial Labs",
    "2B:D1:01": "Fusion Systems",
    "2C:E2:12": "Nebula Labs",
    "2D:F3:23": "Ion Core",
    "2E:04:34": "Stellar Innovations",
    "2F:15:45": "Pulse Labs",
    "30:26:56": "Nova Systems",
    "31:37:67": "ZeroWave Labs",
    "32:48:78": "DarkWave Innovations",
    "33:59:89": "Orbit Labs",
    "34:6A:9A": "Neuro Systems",
    "35:7B:AB": "Plasma Innovations",
    "36:8C:BC": "Cyber Labs",
    "37:9D:CD": "Quantum Innovations",
    "38:AE:DE": "Celestial Core",
    "39:BF:EF": "Fusion Labs",
    "3A:C0:F0": "Nebula Systems",
    "3B:D1:01": "Ion Innovations",
    "3C:E2:12": "Stellar Labs",
    "3D:F3:23": "Pulse Technologies",
    "3E:04:34": "Nova Innovations",
    "3F:15:45": "ZeroPoint Labs",
    "40:26:56": "DarkWave Systems",
    "41:37:67": "Orbit Innovations",
    "42:48:78": "Neuro Labs",
    "43:59:89": "Plasma Labs",
    "44:6A:9A": "Cyber Core",
    "45:7B:AB": "Quantum Labs",
    "46:8C:BC": "Celestial Systems",
    "47:9D:CD": "Fusion Innovations",
    "48:AE:DE": "Nebula Core",
    "49:BF:EF": "Ion Labs",
    "4A:C0:F0": "Stellar Innovations",
    "4B:D1:01": "Pulse Labs",
    "4C:E2:12": "Nova Core",
    "4D:F3:23": "ZeroWave Systems",
    "4E:04:34": "DarkWave Labs",
    "4F:15:45": "Orbit Labs",
    "50:26:56": "Neuro Innovations",
    "51:37:67": "Plasma Core",
    "52:48:78": "Cyber Labs",
    "53:59:89": "Quantum Systems",
    "54:6A:9A": "Celestial Labs",
    "55:7B:AB": "Fusion Core",
    "56:8C:BC": "Nebula Innovations",
    "57:9D:CD": "Ion Systems",
    "58:AE:DE": "Stellar Labs",
    "59:BF:EF": "Pulse Innovations",
    "5A:C0:F0": "Nova Labs",
    "5B:D1:01": "ZeroPoint Systems",
    "5C:E2:12": "DarkWave Innovations",
    "5D:F3:23": "Orbit Core",
    "5E:04:34": "Neuro Labs",
    "5F:15:45": "Plasma Systems"
}
    


def copyright_notice():
    print(Fore.YELLOW + "\nÂ© Copyright 2025 by Ahmet Efe Uslu\n")

def ttl_to_os(ttl):
    """Guess OS based on TTL value."""
    if ttl is None:
        return "Unknown"
    for ttl_range, os_name in TTL_MAP.items():
        if ttl in ttl_range:
            return os_name
    return "Unknown"

def get_local_ip_and_network():
    """Get local IP and network CIDR range."""
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        s.connect(("8.8.8.8", 80))
        local_ip = s.getsockname()[0]
    except Exception:
        local_ip = "127.0.0.1"
    finally:
        s.close()

    parts = local_ip.split('.')
    network = f"{parts[0]}.{parts[1]}.{parts[2]}.0/24"
    return local_ip, network

def ping_host(ip):
    """
    Send a single ICMP ping to host.
    Returns (alive(bool), ttl(int or None))
    """
    # Use system ping to avoid root permissions required by raw sockets
    param = '-n' if subprocess.os.name == 'nt' else '-c'
    timeout_param = '-w' if subprocess.os.name == 'nt' else '-W'
    cmd = ['ping', param, '1', timeout_param, str(TIMEOUT), ip]

    try:
        output = subprocess.check_output(cmd, stderr=subprocess.DEVNULL, universal_newlines=True)
        ttl = None
        # Try to parse TTL from output (platform dependent)
        for line in output.splitlines():
            if 'TTL=' in line.upper():
                # Windows format example: TTL=128
                ttl_str = line.upper().split('TTL=')[1].split()[0]
                ttl = int(ttl_str)
                break
            elif 'ttl=' in line.lower():
                # Linux/macOS format example: ttl=64
                ttl_str = line.lower().split('ttl=')[1].split()[0]
                ttl = int(ttl_str)
                break
        return True, ttl
    except Exception:
        return False, None

def check_port(ip, port):
    """Check if TCP port is open and get banner if possible."""
    try:
        sock = socket.socket()
        sock.settimeout(TIMEOUT)
        result = sock.connect_ex((ip, port))
        if result == 0:
            try:
                sock.send(b'HEAD / HTTP/1.0\r\n\r\n')
                banner = sock.recv(1024).decode(errors='ignore').strip()
                if not banner:
                    sock.send(b'\r\n')
                    banner = sock.recv(1024).decode(errors='ignore').strip()
            except:
                banner = "Banner not fetched"
            sock.close()
            return "OPEN", banner
        else:
            sock.close()
            return "CLOSED", ""
    except Exception as e:
        return "ERROR", str(e)

def guess_os_by_ports(open_ports):
    """
    Enhance OS guess based on known open ports.
    Returns string or None if no match.
    """
    os_guesses = set()
    for port in open_ports:
        if port in PORT_OS_HINTS:
            os_guesses.add(PORT_OS_HINTS[port])
    if len(os_guesses) == 1:
        return os_guesses.pop()
    elif len(os_guesses) > 1:
        return ", ".join(os_guesses)
    else:
        return None

def get_mac_vendor(mac):
    """Get vendor name from MAC address prefix."""
    if mac is None:
        return "Unknown"
    prefix = mac.upper()[0:8]
    return MAC_VENDOR_PREFIXES.get(prefix, "Unknown")

def worker(queue, results):
    while not queue.empty():
        ip = queue.get()
        alive, ttl = ping_host(ip)
        if alive:
            open_ports = {}
            for port in PORTS:
                status, banner = check_port(ip, port)
                if status == "OPEN":
                    open_ports[port] = banner

            os_guess_ttl = ttl_to_os(ttl)
            os_guess_ports = guess_os_by_ports(open_ports.keys())
            if os_guess_ports:
                os_guess = f"{os_guess_ports} (TTL={ttl})"
            else:
                os_guess = f"{os_guess_ttl} (TTL={ttl})"

            # We do not get MAC here due to no root privileges for ARP
            brand = "Unknown"

            results.append({
                "ip": ip,
                "ttl": ttl,
                "os_guess": os_guess,
                "brand": brand,
                "open_ports": open_ports
            })
        queue.task_done()

def main():
    copyright_notice()
    print(Fore.CYAN + "[+] LAN PORT SCAN STARTING...")
    start_time = datetime.now()

    local_ip, network_cidr = get_local_ip_and_network()
    print(f"[+] Local IP: {local_ip}")
    print(f"[+] Network Range: {network_cidr}\n")

    network = ip_network(network_cidr)
    ips = [str(ip) for ip in network.hosts()]

    queue = Queue()
    results = []

    for ip in ips:
        queue.put(ip)

    thread_count = 50
    threads = []

    for _ in range(thread_count):
        t = threading.Thread(target=worker, args=(queue, results))
        t.daemon = True
        t.start()
        threads.append(t)

    queue.join()

    # Print results with colors
    for res in results:
        print(Fore.GREEN + f"[+] {res['ip']} ACTIVE - OS Guess: {res['os_guess']} - Brand: {res['brand']} (TTL={res['ttl']})")
        if res["open_ports"]:
            for port, banner in res["open_ports"].items():
                print(Fore.YELLOW + f"[+] Port {port} OPEN - Service:\n{banner}\n")
        else:
            print(Fore.RED + "[-] No open ports found.\n")

    end_time = datetime.now()
    print(Fore.CYAN + f"[+] Finished at: {end_time.strftime('%H:%M:%S')}")
    print(Fore.CYAN + f"[+] Scan duration: {end_time - start_time}")

if __name__ == "__main__":
    main()